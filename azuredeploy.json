{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "title": "SharePoint Contact Sync - Production Ready",
    "description": "Enterprise-ready deployment template with guided setup process",
    "version": "1.0.0",
    "author": "SharePoint Contact Sync Team"
  },
  "parameters": {
    "customerName": {
      "type": "string",
      "maxLength": 20,
      "metadata": {
        "description": "Customer/Organization name (used for resource naming)"
      }
    },
    "adminEmail": {
      "type": "string",
      "metadata": {
        "description": "Administrator email address for notifications"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Azure region for all resources"
      }
    },
    "environment": {
      "type": "string",
      "defaultValue": "prod",
      "allowedValues": [
        "dev",
        "test",
        "prod"
      ],
      "metadata": {
        "description": "Environment type for resource tagging and naming"
      }
    }
  },
  "variables": {
    "deploymentId": "[take(uniqueString(resourceGroup().id, deployment().name), 8)]",
    "namingPrefix": "[concat('sp-contact-sync-', variables('deploymentId'))]",
    "functionAppName": "[concat('func-', variables('namingPrefix'))]",
    "storageAccountName": "[concat('st', replace(variables('namingPrefix'), '-', ''))]",
    "keyVaultName": "[concat('kv-', variables('namingPrefix'))]",
    "appInsightsName": "[concat('ai-', variables('namingPrefix'))]",
    "appServicePlanName": "[concat('asp-', variables('namingPrefix'))]",
    "managedIdentityName": "[concat('mi-', variables('namingPrefix'))]",
    "commonTags": {
      "Application": "SharePoint Contact Sync",
      "Environment": "[parameters('environment')]",
      "Customer": "[parameters('customerName')]",
      "DeploymentId": "[variables('deploymentId')]",
      "Version": "1.0.0"
    }
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2022-09-01",
      "name": "[variables('storageAccountName')]",
      "location": "[parameters('location')]",
      "tags": "[variables('commonTags')]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "StorageV2",
      "properties": {
        "supportsHttpsTrafficOnly": true,
        "minimumTlsVersion": "TLS1_2",
        "allowBlobPublicAccess": false,
        "networkAcls": {
          "defaultAction": "Allow"
        }
      }
    },
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02",
      "name": "[variables('appInsightsName')]",
      "location": "[parameters('location')]",
      "tags": "[variables('commonTags')]",
      "kind": "web",
      "properties": {
        "Application_Type": "web",
        "RetentionInDays": 90,
        "publicNetworkAccessForIngestion": "Enabled",
        "publicNetworkAccessForQuery": "Enabled"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2023-07-01",
      "name": "[variables('keyVaultName')]",
      "location": "[parameters('location')]",
      "tags": "[variables('commonTags')]",
      "properties": {
        "sku": {
          "family": "A",
          "name": "standard"
        },
        "tenantId": "[subscription().tenantId]",
        "enabledForTemplateDeployment": true,
        "enabledForDiskEncryption": false,
        "enabledForDeployment": false,
        "enableRbacAuthorization": false,
        "enableSoftDelete": true,
        "softDeleteRetentionInDays": 7,
        "enablePurgeProtection": false,
        "networkAcls": {
          "defaultAction": "Allow",
          "bypass": "AzureServices"
        },
        "accessPolicies": []
      }
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2022-09-01",
      "name": "[variables('appServicePlanName')]",
      "location": "[parameters('location')]",
      "tags": "[variables('commonTags')]",
      "sku": {
        "name": "Y1",
        "tier": "Dynamic"
      },
      "kind": "functionapp",
      "properties": {
        "reserved": false
      }
    },
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2023-01-31",
      "name": "[variables('managedIdentityName')]",
      "location": "[parameters('location')]",
      "tags": "[variables('commonTags')]"
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2022-09-01",
      "name": "[variables('functionAppName')]",
      "location": "[parameters('location')]",
      "tags": "[variables('commonTags')]",
      "kind": "functionapp",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
        "[resourceId('Microsoft.Insights/components', variables('appInsightsName'))]",
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ],
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
        "siteConfig": {
          "appSettings": [
            {
              "name": "AzureWebJobsStorage",
              "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', variables('storageAccountName'), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2022-09-01').keys[0].value)]"
            },
            {
              "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
              "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', variables('storageAccountName'), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2022-09-01').keys[0].value)]"
            },
            {
              "name": "WEBSITE_CONTENTSHARE",
              "value": "[toLower(variables('functionAppName'))]"
            },
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~4"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME",
              "value": "powershell"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME_VERSION",
              "value": "7.4"
            },
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(resourceId('Microsoft.Insights/components', variables('appInsightsName'))).InstrumentationKey]"
            },
            {
              "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
              "value": "[reference(resourceId('Microsoft.Insights/components', variables('appInsightsName'))).ConnectionString]"
            },
            {
              "name": "KEY_VAULT_URL",
              "value": "[reference(resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))).vaultUri]"
            },
            {
              "name": "DEPLOYMENT_ID",
              "value": "[variables('deploymentId')]"
            },
            {
              "name": "CUSTOMER_NAME",
              "value": "[parameters('customerName')]"
            },
            {
              "name": "ADMIN_EMAIL",
              "value": "[parameters('adminEmail')]"
            },
            {
              "name": "ENVIRONMENT",
              "value": "[parameters('environment')]"
            },
            {
              "name": "WEBSITE_RUN_FROM_PACKAGE",
              "value": "https://github.com/leifbln/sharepoint-contact-sync/releases/latest/download/function-app.zip"
            }
          ],
          "powerShellVersion": "7.4",
          "use32BitWorkerProcess": false,
          "ftpsState": "Disabled",
          "minTlsVersion": "1.2",
          "scmMinTlsVersion": "1.2",
          "http20Enabled": true,
          "remoteDebuggingEnabled": false
        },
        "httpsOnly": true,
        "publicNetworkAccess": "Enabled"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/accessPolicies",
      "apiVersion": "2023-07-01",
      "name": "[format('{0}/add', variables('keyVaultName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
        "[resourceId('Microsoft.Web/sites', variables('functionAppName'))]"
      ],
      "properties": {
        "accessPolicies": [
          {
            "tenantId": "[subscription().tenantId]",
            "objectId": "[reference(resourceId('Microsoft.Web/sites', variables('functionAppName')), '2022-09-01', 'Full').identity.principalId]",
            "permissions": {
              "secrets": [
                "get",
                "list"
              ]
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2023-07-01",
      "name": "[format('{0}/DeploymentInfo', variables('keyVaultName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ],
      "properties": {
        "value": "[string(createObject('deploymentId', variables('deploymentId'), 'functionAppName', variables('functionAppName'), 'functionAppUrl', format('https://{0}.azurewebsites.net', variables('functionAppName')), 'keyVaultName', variables('keyVaultName'), 'tenantId', subscription().tenantId, 'customerName', parameters('customerName'), 'adminEmail', parameters('adminEmail'), 'environment', parameters('environment'), 'deploymentDate', utcNow('yyyy-MM-ddTHH:mm:ssZ')))]",
        "attributes": {
          "enabled": true
        }
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2023-07-01",
      "name": "[format('{0}/SetupStatus', variables('keyVaultName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ],
      "properties": {
        "value": "[string(createObject('infrastructure_deployed', true, 'app_registration_completed', false, 'admin_consent_granted', false, 'sharepoint_configured', false, 'setup_completed', false, 'last_updated', utcNow('yyyy-MM-ddTHH:mm:ssZ')))]",
        "attributes": {
          "enabled": true
        }
      }
    }
  ],
  "outputs": {
    "deploymentSummary": {
      "type": "object",
      "value": {
        "status": "SUCCESS",
        "deploymentId": "[variables('deploymentId')]",
        "resourcesCreated": {
          "functionApp": "[variables('functionAppName')]",
          "keyVault": "[variables('keyVaultName')]",
          "storageAccount": "[variables('storageAccountName')]",
          "appInsights": "[variables('appInsightsName')]"
        }
      }
    },
    "nextSteps": {
      "type": "object",
      "value": {
        "step1": {
          "title": "Create App Registration",
          "description": "Create Azure AD App Registration manually or using provided script",
          "action": "Follow the setup guide or run the PowerShell script"
        },
        "step2": {
          "title": "Configure Application",
          "description": "Set up SharePoint connections and sync settings",
          "action": "[format('Visit: https://{0}.azurewebsites.net/api/setup', variables('functionAppName'))]"
        },
        "step3": {
          "title": "Test & Verify",
          "description": "Test the sync functionality and verify configuration",
          "action": "[format('Test at: https://{0}.azurewebsites.net/api/test', variables('functionAppName'))]"
        }
      }
    },
    "resourceDetails": {
      "type": "object",
      "value": {
        "functionAppUrl": "[format('https://{0}.azurewebsites.net', variables('functionAppName'))]",
        "keyVaultUrl": "[reference(resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))).vaultUri]",
        "setupUrl": "[format('https://{0}.azurewebsites.net/api/setup', variables('functionAppName'))]",
        "testUrl": "[format('https://{0}.azurewebsites.net/api/test', variables('functionAppName'))]",
        "tenantId": "[subscription().tenantId]",
        "subscriptionId": "[subscription().subscriptionId]",
        "resourceGroupName": "[resourceGroup().name]"
      }
    },
    "setupInstructions": {
      "type": "array",
      "value": [
        "🎉 Infrastructure deployment completed successfully!",
        "",
        "📋 Next Steps:",
        "1️⃣ Create App Registration:",
        "   • Use Azure Portal (recommended for enterprise environments)",
        "   • Or run the provided PowerShell setup script",
        "",
        "2️⃣ Configure Application:",
        "[format('   • Visit: https://{0}.azurewebsites.net/api/setup', variables('functionAppName'))]",
        "   • Follow the guided setup process",
        "",
        "3️⃣ Test Configuration:",
        "[format('   • Test sync: https://{0}.azurewebsites.net/api/test', variables('functionAppName'))]",
        "",
        "📖 For detailed setup instructions, see the documentation.",
        "🔧 For technical support, contact your administrator."
      ]
    }
  }
}
