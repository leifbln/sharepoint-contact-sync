{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "title": "SharePoint Contact Sync",
    "description": "Automatische SharePoint zu Teams Kontakte Synchronisation"
  },
  "parameters": {
    "customerName": {
      "type": "string",
      "metadata": {
        "description": "Name des Kunden"
      }
    },
    "adminEmail": {
      "type": "string",
      "metadata": {
        "description": "Administrator E-Mail"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Azure Region"
      }
    }
  },
  "variables": {
    "deploymentId": "[take(uniqueString(resourceGroup().id, deployment().name), 8)]",
    "functionAppName": "[concat('func-sp-github-', variables('deploymentId'))]",
    "storageAccountName": "[concat('stspgithub', variables('deploymentId'))]",
    "keyVaultName": "[concat('kv-sp-github-', variables('deploymentId'))]",
    "appInsightsName": "[concat('ai-sp-github-', variables('deploymentId'))]",
    "appServicePlanName": "[concat('asp-sp-github-', variables('deploymentId'))]",
    "managedIdentityName": "[concat('mi-deployment-', variables('deploymentId'))]",
    "deploymentScriptName": "[concat('ds-app-reg-', variables('deploymentId'))]"
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2022-09-01",
      "name": "[variables('storageAccountName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "StorageV2",
      "properties": {
        "supportsHttpsTrafficOnly": true,
        "minimumTlsVersion": "TLS1_2"
      }
    },
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02",
      "name": "[variables('appInsightsName')]",
      "location": "[parameters('location')]",
      "kind": "web",
      "properties": {
        "Application_Type": "web",
        "RetentionInDays": 90
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2023-07-01",
      "name": "[variables('keyVaultName')]",
      "location": "[parameters('location')]",
      "properties": {
        "sku": {
          "family": "A",
          "name": "standard"
        },
        "tenantId": "[subscription().tenantId]",
        "enabledForTemplateDeployment": true,
        "enableRbacAuthorization": false,
        "accessPolicies": []
      }
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2022-09-01",
      "name": "[variables('appServicePlanName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Y1",
        "tier": "Dynamic"
      },
      "kind": "functionapp"
    },
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2023-01-31",
      "name": "[variables('managedIdentityName')]",
      "location": "[parameters('location')]"
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2022-09-01",
      "name": "[variables('functionAppName')]",
      "location": "[parameters('location')]",
      "kind": "functionapp",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
        "[resourceId('Microsoft.Insights/components', variables('appInsightsName'))]",
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ],
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
        "siteConfig": {
          "appSettings": [
            {
              "name": "AzureWebJobsStorage",
              "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', variables('storageAccountName'), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2022-09-01').keys[0].value)]"
            },
            {
              "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
              "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', variables('storageAccountName'), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2022-09-01').keys[0].value)]"
            },
            {
              "name": "WEBSITE_CONTENTSHARE",
              "value": "[toLower(variables('functionAppName'))]"
            },
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~4"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME",
              "value": "powershell"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME_VERSION",
              "value": "7.4"
            },
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(resourceId('Microsoft.Insights/components', variables('appInsightsName'))).InstrumentationKey]"
            },
            {
              "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
              "value": "[reference(resourceId('Microsoft.Insights/components', variables('appInsightsName'))).ConnectionString]"
            },
            {
              "name": "KEY_VAULT_URL",
              "value": "[reference(resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))).vaultUri]"
            },
            {
              "name": "DEPLOYMENT_ID",
              "value": "[variables('deploymentId')]"
            },
            {
              "name": "CUSTOMER_NAME",
              "value": "[parameters('customerName')]"
            },
            {
              "name": "ADMIN_EMAIL",
              "value": "[parameters('adminEmail')]"
            },
            {
              "name": "WEBSITE_RUN_FROM_PACKAGE",
              "value": "https://github.com/leifbln/sharepoint-contact-sync/releases/latest/download/function-app.zip"
            }
          ],
          "powerShellVersion": "7.4",
          "use32BitWorkerProcess": false,
          "ftpsState": "Disabled",
          "minTlsVersion": "1.2"
        },
        "httpsOnly": true
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/accessPolicies",
      "apiVersion": "2023-07-01",
      "name": "[format('{0}/add', variables('keyVaultName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('managedIdentityName'))]",
        "[resourceId('Microsoft.Web/sites', variables('functionAppName'))]"
      ],
      "properties": {
        "accessPolicies": [
          {
            "tenantId": "[subscription().tenantId]",
            "objectId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('managedIdentityName')), '2023-01-31').principalId]",
            "permissions": {
              "secrets": [
                "get",
                "set",
                "list"
              ]
            }
          },
          {
            "tenantId": "[subscription().tenantId]",
            "objectId": "[reference(resourceId('Microsoft.Web/sites', variables('functionAppName')), '2022-09-01', 'Full').identity.principalId]",
            "permissions": {
              "secrets": [
                "get",
                "list"
              ]
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Resources/deploymentScripts",
      "apiVersion": "2023-08-01",
      "name": "[variables('deploymentScriptName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults/accessPolicies', variables('keyVaultName'), 'add')]"
      ],
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('managedIdentityName'))]": {}
        }
      },
      "kind": "AzurePowerShell",
      "properties": {
        "azPowerShellVersion": "10.0",
        "retentionInterval": "PT4H",
        "timeout": "PT1H",
        "cleanupPreference": "OnSuccess",
        "environmentVariables": [
          {
            "name": "KEY_VAULT_NAME",
            "value": "[variables('keyVaultName')]"
          },
          {
            "name": "FUNCTION_APP_URL",
            "value": "[format('https://{0}.azurewebsites.net', variables('functionAppName'))]"
          },
          {
            "name": "TENANT_ID",
            "value": "[subscription().tenantId]"
          }
        ],
        "scriptContent": "param([string]$KeyVaultName = $env:KEY_VAULT_NAME, [string]$FunctionAppUrl = $env:FUNCTION_APP_URL, [string]$TenantId = $env:TENANT_ID); Write-Host 'Starting App Registration setup...' -ForegroundColor Green; try { Connect-AzAccount -Identity; Write-Host 'Connected to Azure' -ForegroundColor Green; Install-Module AzureAD -Force -Scope CurrentUser -AllowClobber; Write-Host 'AzureAD module installed' -ForegroundColor Green; $context = Get-AzContext; $accessToken = [Microsoft.Azure.Commands.Common.Authentication.AzureSession]::Instance.AuthenticationFactory.Authenticate($context.Account, $context.Environment, $TenantId, $null, 'https://graph.microsoft.com/', $null).AccessToken; Connect-AzureAD -AadAccessToken $accessToken -AccountId $context.Account.Id -TenantId $TenantId; Write-Host 'Connected to Azure AD' -ForegroundColor Green; $existingApp = Get-AzureADApplication -Filter \"displayName eq 'SharePoint Contact Sync'\" -ErrorAction SilentlyContinue; if ($existingApp) { Write-Host \"Using existing App Registration: $($existingApp.AppId)\" -ForegroundColor Yellow; $app = $existingApp; $oldPasswords = Get-AzureADApplicationPasswordCredential -ObjectId $app.ObjectId -ErrorAction SilentlyContinue; foreach ($pwd in $oldPasswords) { try { Remove-AzureADApplicationPasswordCredential -ObjectId $app.ObjectId -KeyId $pwd.KeyId; } catch { Write-Warning \"Could not remove old secret\" } } } else { Write-Host 'Creating new App Registration...' -ForegroundColor Cyan; $requiredResourceAccess = New-Object -TypeName \"Microsoft.Open.AzureAD.Model.RequiredResourceAccess\"; $requiredResourceAccess.ResourceAppId = \"00000003-0000-0000-c000-000000000000\"; $resourceAccess = @(); $resourceAccess += New-Object -TypeName \"Microsoft.Open.AzureAD.Model.ResourceAccess\" -Property @{Id=\"df021288-bdef-4463-88db-98f22de89214\";Type=\"Role\"}; $resourceAccess += New-Object -TypeName \"Microsoft.Open.AzureAD.Model.ResourceAccess\" -Property @{Id=\"205e70e5-aba6-4c52-a976-6d2d46c48043\";Type=\"Role\"}; $resourceAccess += New-Object -TypeName \"Microsoft.Open.AzureAD.Model.ResourceAccess\" -Property @{Id=\"9492366f-7969-46a4-8d15-ed1a20078fff\";Type=\"Role\"}; $resourceAccess += New-Object -TypeName \"Microsoft.Open.AzureAD.Model.ResourceAccess\" -Property @{Id=\"d13f72ca-a275-4b96-b789-48ebcc4da984\";Type=\"Role\"}; $requiredResourceAccess.ResourceAccess = $resourceAccess; $app = New-AzureADApplication -DisplayName \"SharePoint Contact Sync\" -RequiredResourceAccess $requiredResourceAccess; Write-Host \"App Registration created: $($app.AppId)\" -ForegroundColor Green; }; $servicePrincipal = Get-AzureADServicePrincipal -Filter \"appId eq '$($app.AppId)'\" -ErrorAction SilentlyContinue; if (-not $servicePrincipal) { $servicePrincipal = New-AzureADServicePrincipal -AppId $app.AppId; Write-Host \"Service Principal created: $($servicePrincipal.ObjectId)\" -ForegroundColor Green; }; $endDate = (Get-Date).AddYears(2); $passwordCred = New-AzureADApplicationPasswordCredential -ObjectId $app.ObjectId -EndDate $endDate; Write-Host \"Client secret created\" -ForegroundColor Green; Set-AzKeyVaultSecret -VaultName $KeyVaultName -Name 'ClientId' -SecretValue (ConvertTo-SecureString $app.AppId -AsPlainText -Force); Set-AzKeyVaultSecret -VaultName $KeyVaultName -Name 'ClientSecret' -SecretValue (ConvertTo-SecureString $passwordCred.Value -AsPlainText -Force); Set-AzKeyVaultSecret -VaultName $KeyVaultName -Name 'TenantId' -SecretValue (ConvertTo-SecureString $TenantId -AsPlainText -Force); $adminConsentUrl = \"https://login.microsoftonline.com/$TenantId/adminconsent?client_id=$($app.AppId)\"; $setupUrl = \"$FunctionAppUrl/api/setup\"; Set-AzKeyVaultSecret -VaultName $KeyVaultName -Name 'AdminConsentUrl' -SecretValue (ConvertTo-SecureString $adminConsentUrl -AsPlainText -Force); Set-AzKeyVaultSecret -VaultName $KeyVaultName -Name 'SetupUrl' -SecretValue (ConvertTo-SecureString $setupUrl -AsPlainText -Force); $defaultConfig = @{sharepoint_configs = @(); global_settings = @{setup_completed = $false}} | ConvertTo-Json -Depth 10; Set-AzKeyVaultSecret -VaultName $KeyVaultName -Name 'SharePointConfig' -SecretValue (ConvertTo-SecureString $defaultConfig -AsPlainText -Force); $DeploymentScriptOutputs = @{status = 'success'; appId = $app.AppId; tenantId = $TenantId; adminConsentUrl = $adminConsentUrl; setupUrl = $setupUrl; message = 'App Registration created successfully'}; Write-Host 'App Registration completed!' -ForegroundColor Green; Write-Host \"Admin Consent: $adminConsentUrl\" -ForegroundColor Yellow; } catch { Write-Error \"Failed: $($_.Exception.Message)\"; $DeploymentScriptOutputs = @{status = 'error'; error = $_.Exception.Message}; }"
      }
    }
  ],
  "outputs": {
    "deploymentId": {
      "type": "string",
      "value": "[variables('deploymentId')]"
    },
    "functionAppName": {
      "type": "string",
      "value": "[variables('functionAppName')]"
    },
    "functionAppUrl": {
      "type": "string",
      "value": "[format('https://{0}.azurewebsites.net', variables('functionAppName'))]"
    },
    "keyVaultName": {
      "type": "string",
      "value": "[variables('keyVaultName')]"
    },
    "appRegistrationResult": {
      "type": "object",
      "value": "[reference(variables('deploymentScriptName')).outputs]"
    },
    "adminConsentUrl": {
      "type": "string",
      "value": "[reference(variables('deploymentScriptName')).outputs.adminConsentUrl]"
    },
    "setupUrl": {
      "type": "string",
      "value": "[reference(variables('deploymentScriptName')).outputs.setupUrl]"
    },
    "nextSteps": {
      "type": "array",
      "value": [
        "✅ Infrastructure deployed successfully",
        "[format('🔐 Admin Consent required: {0}', reference(variables('deploymentScriptName')).outputs.adminConsentUrl)]",
        "[format('⚙️  Configure SharePoint: {0}', reference(variables('deploymentScriptName')).outputs.setupUrl)]",
        "[format('🧪 Test sync: {0}/api/SharePointSync', format('https://{0}.azurewebsites.net', variables('functionAppName')))]"
      ]
    }
  }
}
