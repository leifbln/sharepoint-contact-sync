{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "title": "SharePoint Contact Sync",
    "description": "Automatische SharePoint zu Teams Kontakte Synchronisation mit funktionierender App Registration"
  },
  "parameters": {
    "customerName": {
      "type": "string",
      "metadata": {
        "description": "Name des Kunden"
      }
    },
    "adminEmail": {
      "type": "string",
      "metadata": {
        "description": "Administrator E-Mail"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Azure Region"
      }
    }
  },
  "variables": {
    "deploymentId": "[take(uniqueString(resourceGroup().id, deployment().name), 8)]",
    "functionAppName": "[concat('func-sp-github-', variables('deploymentId'))]",
    "storageAccountName": "[concat('stspgithub', variables('deploymentId'))]",
    "keyVaultName": "[concat('kv-sp-github-', variables('deploymentId'))]",
    "appInsightsName": "[concat('ai-sp-github-', variables('deploymentId'))]",
    "appServicePlanName": "[concat('asp-sp-github-', variables('deploymentId'))]",
    "managedIdentityName": "[concat('mi-deployment-', variables('deploymentId'))]",
    "deploymentScriptName": "[concat('ds-app-reg-', variables('deploymentId'))]"
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2022-09-01",
      "name": "[variables('storageAccountName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "StorageV2",
      "properties": {
        "supportsHttpsTrafficOnly": true,
        "minimumTlsVersion": "TLS1_2"
      }
    },
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02",
      "name": "[variables('appInsightsName')]",
      "location": "[parameters('location')]",
      "kind": "web",
      "properties": {
        "Application_Type": "web",
        "RetentionInDays": 90
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2023-07-01",
      "name": "[variables('keyVaultName')]",
      "location": "[parameters('location')]",
      "properties": {
        "sku": {
          "family": "A",
          "name": "standard"
        },
        "tenantId": "[subscription().tenantId]",
        "enabledForTemplateDeployment": true,
        "enableRbacAuthorization": false,
        "accessPolicies": []
      }
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2022-09-01",
      "name": "[variables('appServicePlanName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Y1",
        "tier": "Dynamic"
      },
      "kind": "functionapp"
    },
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2023-01-31",
      "name": "[variables('managedIdentityName')]",
      "location": "[parameters('location')]"
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2022-09-01",
      "name": "[variables('functionAppName')]",
      "location": "[parameters('location')]",
      "kind": "functionapp",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
        "[resourceId('Microsoft.Insights/components', variables('appInsightsName'))]",
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ],
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
        "siteConfig": {
          "appSettings": [
            {
              "name": "AzureWebJobsStorage",
              "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', variables('storageAccountName'), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2022-09-01').keys[0].value)]"
            },
            {
              "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
              "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', variables('storageAccountName'), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2022-09-01').keys[0].value)]"
            },
            {
              "name": "WEBSITE_CONTENTSHARE",
              "value": "[toLower(variables('functionAppName'))]"
            },
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~4"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME",
              "value": "powershell"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME_VERSION",
              "value": "7.4"
            },
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(resourceId('Microsoft.Insights/components', variables('appInsightsName'))).InstrumentationKey]"
            },
            {
              "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
              "value": "[reference(resourceId('Microsoft.Insights/components', variables('appInsightsName'))).ConnectionString]"
            },
            {
              "name": "KEY_VAULT_URL",
              "value": "[reference(resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))).vaultUri]"
            },
            {
              "name": "DEPLOYMENT_ID",
              "value": "[variables('deploymentId')]"
            },
            {
              "name": "CUSTOMER_NAME",
              "value": "[parameters('customerName')]"
            },
            {
              "name": "ADMIN_EMAIL",
              "value": "[parameters('adminEmail')]"
            },
            {
              "name": "WEBSITE_RUN_FROM_PACKAGE",
              "value": "https://github.com/leifbln/sharepoint-contact-sync/releases/latest/download/function-app.zip"
            }
          ],
          "powerShellVersion": "7.4",
          "use32BitWorkerProcess": false,
          "ftpsState": "Disabled",
          "minTlsVersion": "1.2"
        },
        "httpsOnly": true
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/accessPolicies",
      "apiVersion": "2023-07-01",
      "name": "[format('{0}/add', variables('keyVaultName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('managedIdentityName'))]",
        "[resourceId('Microsoft.Web/sites', variables('functionAppName'))]"
      ],
      "properties": {
        "accessPolicies": [
          {
            "tenantId": "[subscription().tenantId]",
            "objectId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('managedIdentityName')), '2023-01-31').principalId]",
            "permissions": {
              "secrets": [
                "get",
                "set",
                "list"
              ]
            }
          },
          {
            "tenantId": "[subscription().tenantId]",
            "objectId": "[reference(resourceId('Microsoft.Web/sites', variables('functionAppName')), '2022-09-01', 'Full').identity.principalId]",
            "permissions": {
              "secrets": [
                "get",
                "list"
              ]
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Resources/deploymentScripts",
      "apiVersion": "2023-08-01",
      "name": "[variables('deploymentScriptName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults/accessPolicies', variables('keyVaultName'), 'add')]"
      ],
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('managedIdentityName'))]": {}
        }
      },
      "kind": "AzurePowerShell",
      "properties": {
        "azPowerShellVersion": "10.0",
        "retentionInterval": "PT4H",
        "timeout": "PT1H",
        "cleanupPreference": "OnSuccess",
        "environmentVariables": [
          {
            "name": "KEY_VAULT_NAME",
            "value": "[variables('keyVaultName')]"
          },
          {
            "name": "FUNCTION_APP_URL",
            "value": "[format('https://{0}.azurewebsites.net', variables('functionAppName'))]"
          },
          {
            "name": "TENANT_ID",
            "value": "[subscription().tenantId]"
          },
          {
            "name": "SUBSCRIPTION_ID",
            "value": "[subscription().subscriptionId]"
          }
        ],
        "scriptContent": "param([string]$KeyVaultName = $env:KEY_VAULT_NAME, [string]$FunctionAppUrl = $env:FUNCTION_APP_URL, [string]$TenantId = $env:TENANT_ID, [string]$SubscriptionId = $env:SUBSCRIPTION_ID); Write-Host '🚀 Starting App Registration with corrected approach...' -ForegroundColor Green; try { Write-Host \"Subscription: $SubscriptionId\" -ForegroundColor Cyan; Write-Host \"Key Vault: $KeyVaultName\" -ForegroundColor Cyan; Write-Host \"Function App: $FunctionAppUrl\" -ForegroundColor Cyan; Write-Host \"Tenant: $TenantId\" -ForegroundColor Cyan; Connect-AzAccount -Identity; $context = Get-AzContext; Write-Host \"Connected to subscription: $($context.Subscription.Name)\" -ForegroundColor Green; Set-AzContext -SubscriptionId $SubscriptionId; Write-Host 'Installing AzureAD module...' -ForegroundColor Cyan; Install-Module AzureAD -Force -Scope CurrentUser -AllowClobber; Write-Host 'Getting access token...' -ForegroundColor Cyan; $azContext = Get-AzContext; $accessToken = [Microsoft.Azure.Commands.Common.Authentication.AzureSession]::Instance.AuthenticationFactory.Authenticate($azContext.Account, $azContext.Environment, $TenantId, $null, 'https://graph.microsoft.com/', $null).AccessToken; Connect-AzureAD -AadAccessToken $accessToken -AccountId $azContext.Account.Id -TenantId $TenantId; Write-Host 'Connected to Azure AD' -ForegroundColor Green; $existingApps = Get-AzureADApplication -Filter \"displayName eq 'SharePoint Contact Sync'\"; if ($existingApps) { Write-Host \"Found $($existingApps.Count) existing apps - cleaning up...\" -ForegroundColor Yellow; foreach ($existingApp in $existingApps) { try { Remove-AzureADApplication -ObjectId $existingApp.ObjectId; Write-Host \"Deleted app: $($existingApp.AppId)\" -ForegroundColor Yellow; } catch { Write-Warning \"Could not delete existing app: $($_.Exception.Message)\"; } } }; Write-Host 'Getting correct permission IDs from Microsoft Graph...' -ForegroundColor Cyan; $graphSP = Get-AzureADServicePrincipal -Filter \"appId eq '00000003-0000-0000-c000-000000000000'\"; $sitesReadAllId = ($graphSP.AppRoles | Where-Object { $_.Value -eq 'Sites.Read.All' }).Id; $sitesSelectedId = ($graphSP.AppRoles | Where-Object { $_.Value -eq 'Sites.Selected' }).Id; $contactsReadWriteId = ($graphSP.AppRoles | Where-Object { $_.Value -eq 'Contacts.ReadWrite' }).Id; $userReadAllId = ($graphSP.AppRoles | Where-Object { $_.Value -eq 'User.Read.All' }).Id; Write-Host \"Permission IDs:\" -ForegroundColor Cyan; Write-Host \"Sites.Read.All: $sitesReadAllId\" -ForegroundColor White; Write-Host \"Sites.Selected: $sitesSelectedId\" -ForegroundColor White; Write-Host \"Contacts.ReadWrite: $contactsReadWriteId\" -ForegroundColor White; Write-Host \"User.Read.All: $userReadAllId\" -ForegroundColor White; $requiredResourceAccess = New-Object -TypeName 'Microsoft.Open.AzureAD.Model.RequiredResourceAccess'; $requiredResourceAccess.ResourceAppId = '00000003-0000-0000-c000-000000000000'; $resourceAccess = @(); if ($sitesReadAllId) { $resourceAccess += New-Object -TypeName 'Microsoft.Open.AzureAD.Model.ResourceAccess' -Property @{Id=$sitesReadAllId;Type='Role'}; }; if ($sitesSelectedId) { $resourceAccess += New-Object -TypeName 'Microsoft.Open.AzureAD.Model.ResourceAccess' -Property @{Id=$sitesSelectedId;Type='Role'}; }; if ($contactsReadWriteId) { $resourceAccess += New-Object -TypeName 'Microsoft.Open.AzureAD.Model.ResourceAccess' -Property @{Id=$contactsReadWriteId;Type='Role'}; }; if ($userReadAllId) { $resourceAccess += New-Object -TypeName 'Microsoft.Open.AzureAD.Model.ResourceAccess' -Property @{Id=$userReadAllId;Type='Role'}; }; $requiredResourceAccess.ResourceAccess = $resourceAccess; $replyUrls = @('https://login.microsoftonline.com/common/oauth2/nativeclient', 'http://localhost'); Write-Host 'Creating App Registration with correct permissions and reply URLs...' -ForegroundColor Cyan; $newApp = New-AzureADApplication -DisplayName 'SharePoint Contact Sync' -RequiredResourceAccess $requiredResourceAccess -ReplyUrls $replyUrls; Write-Host \"✅ App Registration created: $($newApp.AppId)\" -ForegroundColor Green; $sp = New-AzureADServicePrincipal -AppId $newApp.AppId; Write-Host \"✅ Service Principal created: $($sp.ObjectId)\" -ForegroundColor Green; $passwordCred = New-AzureADApplicationPasswordCredential -ObjectId $newApp.ObjectId -EndDate (Get-Date).AddYears(2); Write-Host '✅ Client Secret created' -ForegroundColor Green; Write-Host \"Storing credentials in Key Vault: $KeyVaultName\" -ForegroundColor Cyan; Set-AzKeyVaultSecret -VaultName $KeyVaultName -Name 'ClientId' -SecretValue (ConvertTo-SecureString $newApp.AppId -AsPlainText -Force); Set-AzKeyVaultSecret -VaultName $KeyVaultName -Name 'ClientSecret' -SecretValue (ConvertTo-SecureString $passwordCred.Value -AsPlainText -Force); Set-AzKeyVaultSecret -VaultName $KeyVaultName -Name 'TenantId' -SecretValue (ConvertTo-SecureString $TenantId -AsPlainText -Force); $adminConsentUrl = \"https://login.microsoftonline.com/$TenantId/adminconsent?client_id=$($newApp.AppId)\"; $setupUrl = \"$FunctionAppUrl/api/setup\"; Set-AzKeyVaultSecret -VaultName $KeyVaultName -Name 'AdminConsentUrl' -SecretValue (ConvertTo-SecureString $adminConsentUrl -AsPlainText -Force); Set-AzKeyVaultSecret -VaultName $KeyVaultName -Name 'SetupUrl' -SecretValue (ConvertTo-SecureString $setupUrl -AsPlainText -Force); $defaultConfig = @{sharepoint_configs = @(); global_settings = @{setup_completed = $false; default_sync_frequency = 'hourly'; max_contacts_per_user = 1000; enable_delta_sync = $true; contact_category = 'SharePoint Contacts'}} | ConvertTo-Json -Depth 10; Set-AzKeyVaultSecret -VaultName $KeyVaultName -Name 'SharePointConfig' -SecretValue (ConvertTo-SecureString $defaultConfig -AsPlainText -Force); $DeploymentScriptOutputs = @{status = 'success'; appId = $newApp.AppId; tenantId = $TenantId; servicePrincipalId = $sp.ObjectId; adminConsentUrl = $adminConsentUrl; setupUrl = $setupUrl; message = 'App Registration created successfully with correct permissions and reply URLs'}; Write-Host '' -ForegroundColor White; Write-Host '🎉 App Registration completed successfully!' -ForegroundColor Green; Write-Host '' -ForegroundColor White; Write-Host '📋 Next Steps:' -ForegroundColor Cyan; Write-Host \"1. Admin Consent: $adminConsentUrl\" -ForegroundColor Yellow; Write-Host \"2. SharePoint Setup: $setupUrl\" -ForegroundColor Yellow; Write-Host \"3. Test Sync: $FunctionAppUrl/api/SharePointSync\" -ForegroundColor Yellow; } catch { Write-Error \"❌ App Registration failed: $($_.Exception.Message)\"; Write-Host \"Stack Trace: $($_.ScriptStackTrace)\" -ForegroundColor Red; $DeploymentScriptOutputs = @{status = 'error'; error = $_.Exception.Message; stackTrace = $_.ScriptStackTrace}; }"
      }
    }
  ],
  "outputs": {
    "deploymentId": {
      "type": "string",
      "value": "[variables('deploymentId')]"
    },
    "functionAppName": {
      "type": "string",
      "value": "[variables('functionAppName')]"
    },
    "functionAppUrl": {
      "type": "string",
      "value": "[format('https://{0}.azurewebsites.net', variables('functionAppName'))]"
    },
    "keyVaultName": {
      "type": "string",
      "value": "[variables('keyVaultName')]"
    },
    "appRegistrationResult": {
      "type": "object",
      "value": "[reference(variables('deploymentScriptName')).outputs]"
    },
    "adminConsentUrl": {
      "type": "string",
      "value": "[if(contains(reference(variables('deploymentScriptName')).outputs, 'adminConsentUrl'), reference(variables('deploymentScriptName')).outputs.adminConsentUrl, 'SETUP_FAILED')]"
    },
    "setupUrl": {
      "type": "string", 
      "value": "[if(contains(reference(variables('deploymentScriptName')).outputs, 'setupUrl'), reference(variables('deploymentScriptName')).outputs.setupUrl, format('https://{0}.azurewebsites.net/api/setup', variables('functionAppName')))]"
    },
    "nextSteps": {
      "type": "array",
      "value": "[if(contains(reference(variables('deploymentScriptName')).outputs, 'adminConsentUrl'), createArray('✅ Infrastructure deployed successfully', format('🔐 Admin Consent required: {0}', reference(variables('deploymentScriptName')).outputs.adminConsentUrl), format('⚙️ Configure SharePoint: {0}', reference(variables('deploymentScriptName')).outputs.setupUrl), format('🧪 Test sync: {0}/api/SharePointSync', format('https://{0}.azurewebsites.net', variables('functionAppName')))), createArray('⚠️ App Registration failed - check deployment script logs', 'Fallback options:', format('1. Manual App Registration required'), format('2. Visit setup URL: https://{0}.azurewebsites.net/api/setup', variables('functionAppName'))))]"
    }
  }
}
