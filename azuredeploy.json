{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "title": "SharePoint Contact Sync",
    "description": "Automatische SharePoint zu Teams Kontakte Synchronisation"
  },
  "parameters": {
    "customerName": {
      "type": "string",
      "metadata": {
        "description": "Name des Kunden"
      }
    },
    "adminEmail": {
      "type": "string",
      "metadata": {
        "description": "Administrator E-Mail"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Azure Region"
      }
    }
  },
  "variables": {
    "deploymentId": "[take(uniqueString(resourceGroup().id, deployment().name), 8)]",
    "functionAppName": "[concat('func-sp-github-', variables('deploymentId'))]",
    "storageAccountName": "[concat('stspgithub', variables('deploymentId'))]",
    "keyVaultName": "[concat('kv-sp-github-', variables('deploymentId'))]",
    "appInsightsName": "[concat('ai-sp-github-', variables('deploymentId'))]",
    "appServicePlanName": "[concat('asp-sp-github-', variables('deploymentId'))]",
    "managedIdentityName": "[concat('mi-sp-github-', variables('deploymentId'))]",
    "deploymentScriptName": "[concat('ds-app-reg-', variables('deploymentId'))]",
    "contributorRoleId": "b24988ac-6180-42a0-ab88-20f7382dd24c",
    "graphApplicationAdminRoleId": "9b895d92-2cd3-44c7-9d02-a6ac2d5ea5c3"
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2022-09-01",
      "name": "[variables('storageAccountName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "StorageV2",
      "properties": {
        "supportsHttpsTrafficOnly": true,
        "minimumTlsVersion": "TLS1_2"
      }
    },
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02",
      "name": "[variables('appInsightsName')]",
      "location": "[parameters('location')]",
      "kind": "web",
      "properties": {
        "Application_Type": "web",
        "RetentionInDays": 90
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2023-07-01",
      "name": "[variables('keyVaultName')]",
      "location": "[parameters('location')]",
      "properties": {
        "sku": {
          "family": "A",
          "name": "standard"
        },
        "tenantId": "[subscription().tenantId]",
        "enabledForTemplateDeployment": true,
        "enableRbacAuthorization": true,
        "accessPolicies": []
      }
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2022-09-01",
      "name": "[variables('appServicePlanName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Y1",
        "tier": "Dynamic"
      },
      "kind": "functionapp"
    },
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2023-01-31",
      "name": "[variables('managedIdentityName')]",
      "location": "[parameters('location')]"
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "name": "[guid(resourceGroup().id, 'Contributor')]",
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('managedIdentityName'))]"
      ],
      "properties": {
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('contributorRoleId'))]",
        "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('managedIdentityName')), '2023-01-31').principalId]",
        "principalType": "ServicePrincipal"
      }
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "name": "[guid(resourceGroup().id, variables('keyVaultName'), 'KeyVaultSecretsOfficer')]",
      "scope": "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('managedIdentityName'))]",
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ],
      "properties": {
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b86a8fe4-44ce-4948-aee5-eccb2c155cd7')]",
        "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('managedIdentityName')), '2023-01-31').principalId]",
        "principalType": "ServicePrincipal"
      }
    },
    {
      "type": "Microsoft.Resources/deploymentScripts",
      "apiVersion": "2023-08-01",
      "name": "[variables('deploymentScriptName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Authorization/roleAssignments', guid(resourceGroup().id, 'Contributor'))]",
        "[resourceId('Microsoft.Authorization/roleAssignments', guid(resourceGroup().id, variables('keyVaultName'), 'KeyVaultSecretsOfficer'))]"
      ],
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('managedIdentityName'))]": {}
        }
      },
      "kind": "AzurePowerShell",
      "properties": {
        "azPowerShellVersion": "10.0",
        "retentionInterval": "PT4H",
        "timeout": "PT1H",
        "cleanupPreference": "OnSuccess",
        "environmentVariables": [
          {
            "name": "KEY_VAULT_NAME",
            "value": "[variables('keyVaultName')]"
          },
          {
            "name": "FUNCTION_APP_URL",
            "value": "[format('https://{0}.azurewebsites.net', variables('functionAppName'))]"
          },
          {
            "name": "TENANT_ID",
            "value": "[subscription().tenantId]"
          }
        ],
        "scriptContent": "param(\n    [string]$KeyVaultName = $env:KEY_VAULT_NAME,\n    [string]$FunctionAppUrl = $env:FUNCTION_APP_URL,\n    [string]$TenantId = $env:TENANT_ID\n)\n\nWrite-Host 'üöÄ Starting SharePoint Contact Sync App Registration...' -ForegroundColor Green\nWrite-Host \"Key Vault: $KeyVaultName\" -ForegroundColor Cyan\nWrite-Host \"Function App: $FunctionAppUrl\" -ForegroundColor Cyan\nWrite-Host \"Tenant ID: $TenantId\" -ForegroundColor Cyan\n\ntry {\n    # Wait for RBAC propagation\n    Write-Host 'Waiting for RBAC permissions to propagate...' -ForegroundColor Yellow\n    Start-Sleep -Seconds 60\n    \n    # Connect to Azure first for Az.Resources\n    Write-Host 'Connecting to Azure with Managed Identity...' -ForegroundColor Cyan\n    Connect-AzAccount -Identity\n    \n    # Install Azure AD module instead of Microsoft Graph\n    Write-Host 'Installing AzureAD PowerShell module...' -ForegroundColor Cyan\n    Install-Module AzureAD -Force -Scope CurrentUser -AllowClobber\n    \n    # Get access token for Azure AD\n    $context = Get-AzContext\n    $token = [Microsoft.Azure.Commands.Common.Authentication.AzureSession]::Instance.AuthenticationFactory.Authenticate($context.Account, $context.Environment, $context.Tenant.Id, $null, 'https://graph.microsoft.com/', $null).AccessToken\n    \n    # Connect to AzureAD using the token\n    Connect-AzureAD -AadAccessToken $token -AccountId $context.Account.Id -TenantId $TenantId\n    Write-Host '‚úÖ Connected to Azure AD' -ForegroundColor Green\n    \n    # Check if app already exists\n    Write-Host 'Checking for existing App Registration...' -ForegroundColor Cyan\n    $existingApp = Get-AzureADApplication -Filter \"displayName eq 'SharePoint Contact Sync'\" -ErrorAction SilentlyContinue\n    \n    if ($existingApp) {\n        Write-Host \"‚ö†Ô∏è  App Registration 'SharePoint Contact Sync' already exists\" -ForegroundColor Yellow\n        $app = $existingApp\n        \n        # Remove old passwords\n        $oldPasswords = Get-AzureADApplicationPasswordCredential -ObjectId $app.ObjectId -ErrorAction SilentlyContinue\n        foreach ($pwd in $oldPasswords) {\n            try {\n                Remove-AzureADApplicationPasswordCredential -ObjectId $app.ObjectId -KeyId $pwd.KeyId\n                Write-Host \"Removed old secret\" -ForegroundColor Yellow\n            } catch {\n                Write-Warning \"Could not remove old secret: $($_.Exception.Message)\"\n            }\n        }\n    } else {\n        Write-Host 'Creating new App Registration...' -ForegroundColor Cyan\n        \n        # Required Resource Access for Microsoft Graph\n        $requiredResourceAccess = New-Object -TypeName \"Microsoft.Open.AzureAD.Model.RequiredResourceAccess\"\n        $requiredResourceAccess.ResourceAppId = \"00000003-0000-0000-c000-000000000000\" # Microsoft Graph\n        \n        # Create ResourceAccess objects for each permission\n        $resourceAccess1 = New-Object -TypeName \"Microsoft.Open.AzureAD.Model.ResourceAccess\"\n        $resourceAccess1.Id = \"df021288-bdef-4463-88db-98f22de89214\" # User.Read.All\n        $resourceAccess1.Type = \"Role\"\n        \n        $resourceAccess2 = New-Object -TypeName \"Microsoft.Open.AzureAD.Model.ResourceAccess\"\n        $resourceAccess2.Id = \"205e70e5-aba6-4c52-a976-6d2d46c48043\" # Sites.Read.All\n        $resourceAccess2.Type = \"Role\"\n        \n        $resourceAccess3 = New-Object -TypeName \"Microsoft.Open.AzureAD.Model.ResourceAccess\"\n        $resourceAccess3.Id = \"9492366f-7969-46a4-8d15-ed1a20078fff\" # Sites.Selected\n        $resourceAccess3.Type = \"Role\"\n        \n        $resourceAccess4 = New-Object -TypeName \"Microsoft.Open.AzureAD.Model.ResourceAccess\"\n        $resourceAccess4.Id = \"d13f72ca-a275-4b96-b789-48ebcc4da984\" # Contacts.ReadWrite\n        $resourceAccess4.Type = \"Role\"\n        \n        $requiredResourceAccess.ResourceAccess = $resourceAccess1, $resourceAccess2, $resourceAccess3, $resourceAccess4\n        \n        # Create the application\n        $app = New-AzureADApplication -DisplayName \"SharePoint Contact Sync\" -RequiredResourceAccess $requiredResourceAccess\n        Write-Host \"‚úÖ App Registration created with ID: $($app.AppId)\" -ForegroundColor Green\n    }\n    \n    # Create Service Principal if it doesn't exist\n    Write-Host 'Checking for Service Principal...' -ForegroundColor Cyan\n    $servicePrincipal = Get-AzureADServicePrincipal -Filter \"appId eq '$($app.AppId)'\" -ErrorAction SilentlyContinue\n    \n    if (-not $servicePrincipal) {\n        Write-Host 'Creating Service Principal...' -ForegroundColor Cyan\n        $servicePrincipal = New-AzureADServicePrincipal -AppId $app.AppId\n        Write-Host \"‚úÖ Service Principal created with ID: $($servicePrincipal.ObjectId)\" -ForegroundColor Green\n    } else {\n        Write-Host \"‚úÖ Service Principal already exists: $($servicePrincipal.ObjectId)\" -ForegroundColor Green\n    }\n    \n    # Create new client secret\n    Write-Host 'Creating new client secret...' -ForegroundColor Cyan\n    $endDate = (Get-Date).AddYears(2)\n    $passwordCred = New-AzureADApplicationPasswordCredential -ObjectId $app.ObjectId -EndDate $endDate -CustomKeyIdentifier \"SharePoint Contact Sync Secret\"\n    \n    Write-Host \"‚úÖ Client secret created (expires: $($endDate))\" -ForegroundColor Green\n    \n    # Store credentials in Key Vault\n    Write-Host \"Storing credentials in Key Vault: $KeyVaultName\" -ForegroundColor Cyan\n    \n    Set-AzKeyVaultSecret -VaultName $KeyVaultName -Name 'ClientId' -SecretValue (ConvertTo-SecureString $app.AppId -AsPlainText -Force)\n    Set-AzKeyVaultSecret -VaultName $KeyVaultName -Name 'ClientSecret' -SecretValue (ConvertTo-SecureString $passwordCred.Value -AsPlainText -Force)\n    Set-AzKeyVaultSecret -VaultName $KeyVaultName -Name 'TenantId' -SecretValue (ConvertTo-SecureString $TenantId -AsPlainText -Force)\n    \n    Write-Host '‚úÖ Credentials stored in Key Vault' -ForegroundColor Green\n    \n    # Generate URLs\n    $adminConsentUrl = \"https://login.microsoftonline.com/$TenantId/adminconsent?client_id=$($app.AppId)\"\n    $setupUrl = \"$FunctionAppUrl/api/setup\"\n    \n    Set-AzKeyVaultSecret -VaultName $KeyVaultName -Name 'AdminConsentUrl' -SecretValue (ConvertTo-SecureString $adminConsentUrl -AsPlainText -Force)\n    Set-AzKeyVaultSecret -VaultName $KeyVaultName -Name 'SetupUrl' -SecretValue (ConvertTo-SecureString $setupUrl -AsPlainText -Force)\n    \n    # Create default SharePoint configuration\n    $defaultConfig = @{\n        sharepoint_configs = @()\n        global_settings = @{\n            setup_completed = $false\n            default_sync_frequency = 'hourly'\n            max_contacts_per_user = 1000\n            enable_delta_sync = $true\n            contact_category = 'SharePoint Contacts'\n        }\n    } | ConvertTo-Json -Depth 10 -Compress\n    \n    Set-AzKeyVaultSecret -VaultName $KeyVaultName -Name 'SharePointConfig' -SecretValue (ConvertTo-SecureString $defaultConfig -AsPlainText -Force)\n    \n    Write-Host '‚úÖ Default configuration stored' -ForegroundColor Green\n    \n    # Set deployment script outputs\n    $DeploymentScriptOutputs = @{\n        status = 'success'\n        appId = $app.AppId\n        tenantId = $TenantId\n        servicePrincipalId = $servicePrincipal.ObjectId\n        adminConsentUrl = $adminConsentUrl\n        setupUrl = $setupUrl\n        message = 'App Registration created successfully. Admin consent required before use.'\n    }\n    \n    Write-Host '' -ForegroundColor White\n    Write-Host 'üéâ App Registration setup completed successfully!' -ForegroundColor Green\n    Write-Host '' -ForegroundColor White\n    Write-Host 'üìã Next Steps:' -ForegroundColor Cyan\n    Write-Host \"1. Admin Consent: $adminConsentUrl\" -ForegroundColor White\n    Write-Host \"2. SharePoint Setup: $setupUrl\" -ForegroundColor White\n    Write-Host \"3. Test Sync: $FunctionAppUrl/api/SharePointSync\" -ForegroundColor White\n    Write-Host '' -ForegroundColor White\n    \n} catch {\n    Write-Error \"‚ùå App Registration setup failed: $($_.Exception.Message)\"\n    Write-Host \"Stack Trace: $($_.ScriptStackTrace)\" -ForegroundColor Red\n    \n    $DeploymentScriptOutputs = @{\n        status = 'error'\n        error = $_.Exception.Message\n        stackTrace = $_.ScriptStackTrace\n    }\n}"
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2022-09-01",
      "name": "[variables('functionAppName')]",
      "location": "[parameters('location')]",
      "kind": "functionapp",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
        "[resourceId('Microsoft.Insights/components', variables('appInsightsName'))]",
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
        "[resourceId('Microsoft.Resources/deploymentScripts', variables('deploymentScriptName'))]"
      ],
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
        "siteConfig": {
          "appSettings": [
            {
              "name": "AzureWebJobsStorage",
              "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', variables('storageAccountName'), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2022-09-01').keys[0].value)]"
            },
            {
              "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
              "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', variables('storageAccountName'), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2022-09-01').keys[0].value)]"
            },
            {
              "name": "WEBSITE_CONTENTSHARE",
              "value": "[toLower(variables('functionAppName'))]"
            },
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~4"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME",
              "value": "powershell"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME_VERSION",
              "value": "7.4"
            },
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(resourceId('Microsoft.Insights/components', variables('appInsightsName'))).InstrumentationKey]"
            },
            {
              "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
              "value": "[reference(resourceId('Microsoft.Insights/components', variables('appInsightsName'))).ConnectionString]"
            },
            {
              "name": "KEY_VAULT_URL",
              "value": "[reference(resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))).vaultUri]"
            },
            {
              "name": "DEPLOYMENT_ID",
              "value": "[variables('deploymentId')]"
            },
            {
              "name": "CUSTOMER_NAME",
              "value": "[parameters('customerName')]"
            },
            {
              "name": "ADMIN_EMAIL",
              "value": "[parameters('adminEmail')]"
            },
            {
              "name": "WEBSITE_RUN_FROM_PACKAGE",
              "value": "https://github.com/leifbln/sharepoint-contact-sync/releases/latest/download/function-app.zip"
            }
          ],
          "powerShellVersion": "7.4",
          "use32BitWorkerProcess": false,
          "ftpsState": "Disabled",
          "minTlsVersion": "1.2"
        },
        "httpsOnly": true
      }
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "name": "[guid(resourceGroup().id, variables('functionAppName'), 'KeyVaultSecretsUser')]",
      "scope": "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('functionAppName'))]",
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ],
      "properties": {
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4633458b-17de-408a-b874-0445c86b69e6')]",
        "principalId": "[reference(resourceId('Microsoft.Web/sites', variables('functionAppName')), '2022-09-01', 'Full').identity.principalId]",
        "principalType": "ServicePrincipal"
      }
    }
  ],
  "outputs": {
    "deploymentId": {
      "type": "string",
      "value": "[variables('deploymentId')]"
    },
    "functionAppName": {
      "type": "string",
      "value": "[variables('functionAppName')]"
    },
    "functionAppUrl": {
      "type": "string",
      "value": "[format('https://{0}.azurewebsites.net', variables('functionAppName'))]"
    },
    "keyVaultName": {
      "type": "string",
      "value": "[variables('keyVaultName')]"
    },
    "appRegistrationResult": {
      "type": "object",
      "value": "[reference(variables('deploymentScriptName')).outputs]"
    },
    "adminConsentUrl": {
      "type": "string",
      "value": "[reference(variables('deploymentScriptName')).outputs.adminConsentUrl]"
    },
    "setupUrl": {
      "type": "string",
      "value": "[reference(variables('deploymentScriptName')).outputs.setupUrl]"
    },
    "nextSteps": {
      "type": "array",
      "value": [
        "[format('‚úÖ Infrastructure deployed successfully')]",
        "[format('üîê Admin Consent required: {0}', reference(variables('deploymentScriptName')).outputs.adminConsentUrl)]",
        "[format('‚öôÔ∏è  Configure SharePoint: {0}', reference(variables('deploymentScriptName')).outputs.setupUrl)]",
        "[format('üß™ Test sync: {0}/api/SharePointSync', format('https://{0}.azurewebsites.net', variables('functionAppName')))]"
      ]
    }
  }
}
