{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "title": "SharePoint Contact Sync - Simple & Working",
    "description": "Garantiert funktionierendes ARM Template mit einfachem App Registration Script"
  },
  "parameters": {
    "customerName": {
      "type": "string",
      "metadata": {
        "description": "Name des Kunden"
      }
    },
    "adminEmail": {
      "type": "string",
      "metadata": {
        "description": "Administrator E-Mail"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Azure Region"
      }
    }
  },
  "variables": {
    "deploymentId": "[take(uniqueString(resourceGroup().id, deployment().name), 8)]",
    "functionAppName": "[concat('func-sp-github-', variables('deploymentId'))]",
    "storageAccountName": "[concat('stspgithub', variables('deploymentId'))]",
    "keyVaultName": "[concat('kv-sp-github-', variables('deploymentId'))]",
    "appInsightsName": "[concat('ai-sp-github-', variables('deploymentId'))]",
    "appServicePlanName": "[concat('asp-sp-github-', variables('deploymentId'))]",
    "managedIdentityName": "[concat('mi-deployment-', variables('deploymentId'))]",
    "deploymentScriptName": "[concat('ds-app-reg-', variables('deploymentId'))]"
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2022-09-01",
      "name": "[variables('storageAccountName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "StorageV2",
      "properties": {
        "supportsHttpsTrafficOnly": true,
        "minimumTlsVersion": "TLS1_2"
      }
    },
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02",
      "name": "[variables('appInsightsName')]",
      "location": "[parameters('location')]",
      "kind": "web",
      "properties": {
        "Application_Type": "web",
        "RetentionInDays": 90
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2023-07-01",
      "name": "[variables('keyVaultName')]",
      "location": "[parameters('location')]",
      "properties": {
        "sku": {
          "family": "A",
          "name": "standard"
        },
        "tenantId": "[subscription().tenantId]",
        "enabledForTemplateDeployment": true,
        "enableRbacAuthorization": false,
        "accessPolicies": []
      }
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2022-09-01",
      "name": "[variables('appServicePlanName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Y1",
        "tier": "Dynamic"
      },
      "kind": "functionapp"
    },
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2023-01-31",
      "name": "[variables('managedIdentityName')]",
      "location": "[parameters('location')]"
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2022-09-01",
      "name": "[variables('functionAppName')]",
      "location": "[parameters('location')]",
      "kind": "functionapp",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
        "[resourceId('Microsoft.Insights/components', variables('appInsightsName'))]",
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ],
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
        "siteConfig": {
          "appSettings": [
            {
              "name": "AzureWebJobsStorage",
              "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', variables('storageAccountName'), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2022-09-01').keys[0].value)]"
            },
            {
              "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
              "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', variables('storageAccountName'), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2022-09-01').keys[0].value)]"
            },
            {
              "name": "WEBSITE_CONTENTSHARE",
              "value": "[toLower(variables('functionAppName'))]"
            },
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~4"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME",
              "value": "powershell"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME_VERSION",
              "value": "7.4"
            },
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(resourceId('Microsoft.Insights/components', variables('appInsightsName'))).InstrumentationKey]"
            },
            {
              "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
              "value": "[reference(resourceId('Microsoft.Insights/components', variables('appInsightsName'))).ConnectionString]"
            },
            {
              "name": "KEY_VAULT_URL",
              "value": "[reference(resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))).vaultUri]"
            },
            {
              "name": "DEPLOYMENT_ID",
              "value": "[variables('deploymentId')]"
            },
            {
              "name": "CUSTOMER_NAME",
              "value": "[parameters('customerName')]"
            },
            {
              "name": "ADMIN_EMAIL",
              "value": "[parameters('adminEmail')]"
            },
            {
              "name": "WEBSITE_RUN_FROM_PACKAGE",
              "value": "https://github.com/leifbln/sharepoint-contact-sync/releases/latest/download/function-app.zip"
            }
          ],
          "powerShellVersion": "7.4",
          "use32BitWorkerProcess": false,
          "ftpsState": "Disabled",
          "minTlsVersion": "1.2"
        },
        "httpsOnly": true
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/accessPolicies",
      "apiVersion": "2023-07-01",
      "name": "[format('{0}/add', variables('keyVaultName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('managedIdentityName'))]",
        "[resourceId('Microsoft.Web/sites', variables('functionAppName'))]"
      ],
      "properties": {
        "accessPolicies": [
          {
            "tenantId": "[subscription().tenantId]",
            "objectId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('managedIdentityName')), '2023-01-31').principalId]",
            "permissions": {
              "secrets": [
                "get",
                "set",
                "list"
              ]
            }
          },
          {
            "tenantId": "[subscription().tenantId]",
            "objectId": "[reference(resourceId('Microsoft.Web/sites', variables('functionAppName')), '2022-09-01', 'Full').identity.principalId]",
            "permissions": {
              "secrets": [
                "get",
                "list"
              ]
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Resources/deploymentScripts",
      "apiVersion": "2023-08-01",
      "name": "[variables('deploymentScriptName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults/accessPolicies', variables('keyVaultName'), 'add')]"
      ],
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('managedIdentityName'))]": {}
        }
      },
      "kind": "AzurePowerShell",
      "properties": {
        "azPowerShellVersion": "10.0",
        "retentionInterval": "PT4H",
        "timeout": "PT30M",
        "cleanupPreference": "OnSuccess",
        "environmentVariables": [
          {
            "name": "KEY_VAULT_NAME",
            "value": "[variables('keyVaultName')]"
          },
          {
            "name": "FUNCTION_APP_URL",
            "value": "[format('https://{0}.azurewebsites.net', variables('functionAppName'))]"
          },
          {
            "name": "TENANT_ID",
            "value": "[subscription().tenantId]"
          }
        ],
        "scriptContent": "param([string]$KeyVaultName = $env:KEY_VAULT_NAME, [string]$FunctionAppUrl = $env:FUNCTION_APP_URL, [string]$TenantId = $env:TENANT_ID);\nWrite-Host 'REST API App Registration Script';\ntry {\n  Connect-AzAccount -Identity;\n  $context = Get-AzContext;\n  Write-Host \"Connected: $($context.Account.Id)\";\n  \n  # Get access token for Microsoft Graph\n  $token = [Microsoft.Azure.Commands.Common.Authentication.AzureSession]::Instance.AuthenticationFactory.Authenticate($context.Account, $context.Environment, $TenantId, $null, 'https://graph.microsoft.com/', $null).AccessToken;\n  Write-Host 'Got Graph API token';\n  \n  # Headers for Graph API\n  $headers = @{\n    'Authorization' = \"Bearer $token\"\n    'Content-Type' = 'application/json'\n  };\n  \n  # Delete existing apps via REST API\n  $searchUri = \"https://graph.microsoft.com/v1.0/applications?`$filter=displayName eq 'SharePoint Contact Sync'\";\n  $existingApps = Invoke-RestMethod -Uri $searchUri -Headers $headers -Method GET;\n  foreach ($app in $existingApps.value) {\n    $deleteUri = \"https://graph.microsoft.com/v1.0/applications/$($app.id)\";\n    Invoke-RestMethod -Uri $deleteUri -Headers $headers -Method DELETE;\n    Write-Host \"Deleted app: $($app.appId)\";\n  };\n  \n  # Create new app via REST API\n  $appBody = @{\n    displayName = 'SharePoint Contact Sync'\n    requiredResourceAccess = @(\n      @{\n        resourceAppId = '00000003-0000-0000-c000-000000000000'\n        resourceAccess = @(\n          @{ id = '332a536c-c7ef-4017-ab91-336970924f0d'; type = 'Role' },\n          @{ id = 'd56682ec-c09e-4743-aaf4-1a3aac4caa21'; type = 'Role' },\n          @{ id = 'df021288-bdef-4463-88db-98f22de89214'; type = 'Role' }\n        )\n      }\n    )\n    web = @{\n      redirectUris = @('https://login.microsoftonline.com/common/oauth2/nativeclient')\n    }\n  } | ConvertTo-Json -Depth 10;\n  \n  $createUri = 'https://graph.microsoft.com/v1.0/applications';\n  $newApp = Invoke-RestMethod -Uri $createUri -Headers $headers -Method POST -Body $appBody;\n  Write-Host \"Created app: $($newApp.appId)\";\n  \n  # Create service principal\n  $spBody = @{ appId = $newApp.appId } | ConvertTo-Json;\n  $spUri = 'https://graph.microsoft.com/v1.0/servicePrincipals';\n  $sp = Invoke-RestMethod -Uri $spUri -Headers $headers -Method POST -Body $spBody;\n  Write-Host \"Created SP: $($sp.id)\";\n  \n  # Create client secret\n  $secretBody = @{\n    passwordCredential = @{\n      displayName = 'SharePoint Contact Sync Secret'\n      endDateTime = (Get-Date).AddYears(2).ToString('yyyy-MM-ddTHH:mm:ss.fffZ')\n    }\n  } | ConvertTo-Json -Depth 5;\n  \n  $secretUri = \"https://graph.microsoft.com/v1.0/applications/$($newApp.id)/addPassword\";\n  $secret = Invoke-RestMethod -Uri $secretUri -Headers $headers -Method POST -Body $secretBody;\n  Write-Host 'Created client secret';\n  \n  # Store in Key Vault\n  Set-AzKeyVaultSecret -VaultName $KeyVaultName -Name 'ClientId' -SecretValue (ConvertTo-SecureString $newApp.appId -AsPlainText -Force);\n  Set-AzKeyVaultSecret -VaultName $KeyVaultName -Name 'ClientSecret' -SecretValue (ConvertTo-SecureString $secret.secretText -AsPlainText -Force);\n  Set-AzKeyVaultSecret -VaultName $KeyVaultName -Name 'TenantId' -SecretValue (ConvertTo-SecureString $TenantId -AsPlainText -Force);\n  \n  $adminConsentUrl = \"https://login.microsoftonline.com/$TenantId/adminconsent?client_id=$($newApp.appId)\";\n  Set-AzKeyVaultSecret -VaultName $KeyVaultName -Name 'AdminConsentUrl' -SecretValue (ConvertTo-SecureString $adminConsentUrl -AsPlainText -Force);\n  Set-AzKeyVaultSecret -VaultName $KeyVaultName -Name 'SetupUrl' -SecretValue (ConvertTo-SecureString \"$FunctionAppUrl/api/setup\" -AsPlainText -Force);\n  \n  $config = @{sharepoint_configs=@();global_settings=@{setup_completed=$false}} | ConvertTo-Json -Depth 10;\n  Set-AzKeyVaultSecret -VaultName $KeyVaultName -Name 'SharePointConfig' -SecretValue (ConvertTo-SecureString $config -AsPlainText -Force);\n  \n  $DeploymentScriptOutputs = @{\n    status = 'success'\n    appId = $newApp.appId\n    adminConsentUrl = $adminConsentUrl\n    setupUrl = \"$FunctionAppUrl/api/setup\"\n    message = 'App Registration created via REST API'\n  };\n  \n  Write-Host \"SUCCESS: App $($newApp.appId) created\";\n  Write-Host \"Admin Consent: $adminConsentUrl\";\n  \n} catch {\n  Write-Error \"Failed: $($_.Exception.Message)\";\n  $DeploymentScriptOutputs = @{\n    status = 'error'\n    error = $_.Exception.Message\n  };\n}"
      }
    }
  ],
  "outputs": {
    "deploymentId": {
      "type": "string",
      "value": "[variables('deploymentId')]"
    },
    "functionAppName": {
      "type": "string",
      "value": "[variables('functionAppName')]"
    },
    "functionAppUrl": {
      "type": "string",
      "value": "[format('https://{0}.azurewebsites.net', variables('functionAppName'))]"
    },
    "keyVaultName": {
      "type": "string",
      "value": "[variables('keyVaultName')]"
    },
    "appRegistrationResult": {
      "type": "object",
      "value": "[reference(variables('deploymentScriptName')).outputs]"
    },
    "adminConsentUrl": {
      "type": "string",
      "value": "[if(contains(reference(variables('deploymentScriptName')).outputs, 'adminConsentUrl'), reference(variables('deploymentScriptName')).outputs.adminConsentUrl, 'SCRIPT_FAILED')]"
    },
    "setupUrl": {
      "type": "string",
      "value": "[format('https://{0}.azurewebsites.net/api/setup', variables('functionAppName'))]"
    },
    "nextSteps": {
      "type": "array",
      "value": [
        "✅ Infrastructure deployed",
        "[format('🔐 Admin Consent: {0}', if(contains(reference(variables('deploymentScriptName')).outputs, 'adminConsentUrl'), reference(variables('deploymentScriptName')).outputs.adminConsentUrl, 'Check deployment script logs'))]",
        "[format('⚙️ Setup SharePoint: https://{0}.azurewebsites.net/api/setup', variables('functionAppName'))]",
        "[format('🧪 Test Sync: https://{0}.azurewebsites.net/api/SharePointSync', variables('functionAppName'))]"
      ]
    }
  }
}
